// <auto-generated />
using System;
using Homework7.DatabaseModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Homework7.EFMigrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241019092758_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Homework7.DatabaseModels.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("char(3)")
                        .HasColumnName("country_id");

                    b.Property<int>("AreaSqkm")
                        .HasColumnType("integer")
                        .HasColumnName("area_sqkm");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("char(40)")
                        .HasColumnName("country_name");

                    b.Property<int>("Population")
                        .HasColumnType("integer")
                        .HasColumnName("population");

                    b.HasKey("CountryId");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("char(7)")
                        .HasColumnName("event_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("char(20)")
                        .HasColumnName("eventtype");

                    b.Property<int>("IsTeamEvent")
                        .HasColumnType("integer")
                        .HasColumnName("is_team_event");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("char(40)")
                        .HasColumnName("event_name");

                    b.Property<int>("NumPlayersInTeam")
                        .HasColumnType("integer")
                        .HasColumnName("num_players_in_team");

                    b.Property<string>("OlympicId")
                        .IsRequired()
                        .HasColumnType("char(7)")
                        .HasColumnName("olympic_id");

                    b.Property<string>("ResultNotedIn")
                        .IsRequired()
                        .HasColumnType("char(100)")
                        .HasColumnName("result_noted_in");

                    b.HasKey("EventId");

                    b.HasIndex("OlympicId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Olympic", b =>
                {
                    b.Property<string>("OlympicId")
                        .HasColumnType("char(7)")
                        .HasColumnName("olympic_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("char(50)")
                        .HasColumnName("city");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("OlympicId");

                    b.HasIndex("CountryId");

                    b.ToTable("olympics");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Player", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("char(10)")
                        .HasColumnName("player_id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.HasKey("PlayerId");

                    b.HasIndex("CountryId");

                    b.ToTable("players");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Result", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("char(7)")
                        .HasColumnName("event_id");

                    b.Property<string>("PlayerId")
                        .HasColumnType("char(10)")
                        .HasColumnName("player_id");

                    b.Property<string>("Medal")
                        .IsRequired()
                        .HasColumnType("char(7)")
                        .HasColumnName("medal");

                    b.Property<double>("ResultValue")
                        .HasColumnType("double precision")
                        .HasColumnName("result");

                    b.HasKey("EventId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("results");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Event", b =>
                {
                    b.HasOne("Homework7.DatabaseModels.Olympic", "Olympic")
                        .WithMany()
                        .HasForeignKey("OlympicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Olympic");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Olympic", b =>
                {
                    b.HasOne("Homework7.DatabaseModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Player", b =>
                {
                    b.HasOne("Homework7.DatabaseModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Homework7.DatabaseModels.Result", b =>
                {
                    b.HasOne("Homework7.DatabaseModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Homework7.DatabaseModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
